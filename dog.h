#pragma once
#include <iostream>

using namespace std;

//специальный тип данных, чтобы узнать - правильно ли создан объект класса или нет
enum StatusEr
{
	OK, Err
};

//Описание класса Кошки
class dogs
{
public:
	dogs(string p, string cl, int v, int yb, string sex, int Sherst); // конструктор - задаем породу, цвет, вес и год рождения, сделать надо при создании, 
											  // так как считаем, что не может быть кошка с пустой породой, бесцветная, с нулевым весом и без возраста
	dogs() { Status = Err; }				  // конструктор по умолчанию - добавляется для работы с указателями - нужен только для создания динамического объекта, 
											  // поэтому не может использовать в других случаях!
	//геттеры/селекторы - узнать значение атрибута (поля, характеристики объекта)
	string getPoroda();
	int getYearBirth();
	int getVes();
	string getColor();
	string getName();
	string getSex();
	int getSherst();
	// специальный
	bool getStatus(); //прежде чем начать работу с кошкой - узнать, а можно ли с ней работать
//сеттеры/модификаторы - установить (изменить) значение атрибута (поля, характеристики объекта), если это разрешено
	bool setUpVes(int v); //кошка может увеличить вес
	bool setDownVes(int v); //кошка может уменьшить вес
	bool setStrichka(int sherst);
	bool setName(string nm); //кошка дали имя, или изменили его
//действия
	void Go();    // кошка идет
	void Voice(); // кошка мяукает 
	void Eat();
	void Gaming();
	void Print(); //вывод информации о конкретном объекте, в дальнейшем лучше заменить на перегрузку операторов вывода!

private:
	string Poroda;
	string Sex;
	int Sherst;
	int YearBirth;
	int Ves;
	string Color;
	string Name;
	int Status; //а можно ли с кошкой работать, или есть неверно определенные параметры

	bool ChangeVes(int v); //служебный метод класса, недоступен извне! Сделан для того, чтобы единым образом проверять на допустимость попытку изменить вес кошки
};
